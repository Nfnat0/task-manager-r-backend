AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  task-manager-r-backend

  Sample SAM Template for task-manager-r-backend

Globals:
  Function:
    Timeout: 30
  Api:
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,DELETE,PUT'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'*'"

Resources:
  TaskTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TaskTable
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/taskHandler.createTask
      Runtime: nodejs20.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TaskTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTable
      Events:
        CreateTaskApi:
          Type: Api
          Properties:
            Path: /tasks
            Method: post

  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/taskHandler.getTasks
      Runtime: nodejs20.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TaskTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTable
      Events:
        GetTasksApi:
          Type: Api
          Properties:
            Path: /tasks
            Method: get

  GetTaskByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/taskHandler.getTaskById
      Runtime: nodejs20.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TaskTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTable
      Events:
        GetTaskByIdApi:
          Type: Api
          Properties:
            Path: /tasks/{id}
            Method: get

  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/taskHandler.updateTask
      Runtime: nodejs20.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TaskTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTable
      Events:
        UpdateTaskApi:
          Type: Api
          Properties:
            Path: /tasks/{id}
            Method: put

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/taskHandler.deleteTask
      Runtime: nodejs20.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TaskTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTable
      Events:
        DeleteTaskApi:
          Type: Api
          Properties:
            Path: /tasks/{id}
            Method: delete

Outputs:
  CreateTaskApi:
    Description: "API Gateway endpoint URL for CreateTask function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tasks"
  GetTasksApi:
    Description: "API Gateway endpoint URL for GetTasks function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tasks"
  GetTaskByIdApi:
    Description: "API Gateway endpoint URL for GetTaskById function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tasks/{id}"
  UpdateTaskApi:
    Description: "API Gateway endpoint URL for UpdateTask function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tasks/{id}"
  DeleteTaskApi:
    Description: "API Gateway endpoint URL for DeleteTask function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tasks/{id}"
